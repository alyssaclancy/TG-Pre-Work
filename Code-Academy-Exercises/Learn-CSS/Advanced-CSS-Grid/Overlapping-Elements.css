.container {
  display: grid;
  max-width: 900px;
  position: relative;
  margin: auto;
  grid-gap: 10px;
  grid-template: repeat(12, 1fr) / repeat(6, 1fr);
}

h1, h2, h3 {
  font-family: monospace;
  text-align: center;
}

header {
  background-color: dodgerblue;
  grid-area: 1 / 1 / 3 / 7;
}

nav {
  background-color: beige;
  grid-area: 3 / 1 / 4 / 7;
}

.left {
  background-color: dodgerblue;
  grid-area: 4 / 1 / 9 / 5;
}

.right {
  background-color: beige;
  grid-area: 4 / 5 / 9 / 7;
}

.overlap {
  background-color: lightcoral;
  grid-area: 6 / 4 / 8 / 6;
  z-index: 5;
}

footer {
  background-color: dodgerblue;
  grid-area: 9 / 1 / 13 / 7;
}

/*I learned it is easiest to overlap elements using grid line names and the grid-area property.
This is where the z-index feature becomes very handy to pull elements to the front.
Here, the left and right box were re-sized and set side by side. Then the overlap element
was placed in the same overlapping space as part of left and right using grid-area. It was pulled to the front using z-axis.
Then the footer was selected to span all 6 columns.
*/
